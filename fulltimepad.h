/*
 * Author: Taha
 * Date: Feb 6, 2025
 *
 * Full-Time-Pad Symmetric Stream Cipher
 *  Copyright (C) 2025  Taha
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 */

#ifndef FULLTIMEPAD_H
#define FULLTIMEPAD_H

#include <iostream>
#include <iomanip>
#include <stdint.h>
#include <string.h>
#include <sstream>
#include <assert.h>
#include <bit>
#include <array>

// check endiannes before assigning n_V to big/little endian version
static consteval bool is_big_endian() {
	return std::endian::native == std::endian::big;
}

// 256-bit Full-Time-Pad Cipher
class FullTimePad
{
	public:

			// ideal permutations: would have 1 byte shifted to each another 32-bit number.
			// e.g. byte 0 goes to byte 4
			static constexpr std::array<std::array<uint8_t, 32>, 16> n_V_big_endian = {{
				{0, 4, 8, 12, 16, 20, 24, 28, 1, 5, 9, 13, 17, 21, 25, 29, 2, 6, 10, 14, 18, 22, 26, 30, 3, 7, 11, 15, 19, 23, 27, 31},
				{4, 8, 12, 0, 20, 24, 28, 16, 5, 9, 13, 1, 21, 25, 29, 17, 6, 10, 14, 2, 22, 26, 30, 18, 7, 11, 15, 3, 23, 27, 31, 19}, 
				{8, 12, 0, 4, 24, 28, 16, 20, 9, 13, 1, 5, 25, 29, 17, 21, 10, 14, 2, 6, 26, 30, 18, 22, 11, 15, 3, 7, 27, 31, 19, 23},
				{12, 0, 4, 8, 28, 16, 20, 24, 13, 1, 5, 9, 29, 17, 21, 25, 14, 2, 6, 10, 30, 18, 22, 26, 15, 3, 7, 11, 31, 19, 23, 27},
				{12, 28, 13, 29, 14, 30, 15, 31, 0, 16, 1, 17, 2, 18, 3, 19, 4, 20, 5, 21, 6, 22, 7, 23, 8, 24, 9, 25, 10, 26, 11, 27},
				{28, 13, 29, 12, 30, 15, 31, 14, 16, 1, 17, 0, 18, 3, 19, 2, 20, 5, 21, 4, 22, 7, 23, 6, 24, 9, 25, 8, 26, 11, 27, 10},
				{13, 29, 12, 28, 15, 31, 14, 30, 1, 17, 0, 16, 3, 19, 2, 18, 5, 21, 4, 20, 7, 23, 6, 22, 9, 25, 8, 24, 11, 27, 10, 26},
				{29, 12, 28, 13, 31, 14, 30, 15, 17, 0, 16, 1, 19, 2, 18, 3, 21, 4, 20, 5, 23, 6, 22, 7, 25, 8, 24, 9, 27, 10, 26, 11},
				{29, 31, 17, 19, 21, 23, 25, 27, 12, 14, 0, 2, 4, 6, 8, 10, 28, 30, 16, 18, 20, 22, 24, 26, 13, 15, 1, 3, 5, 7, 9, 11},
				{31, 17, 19, 29, 23, 25, 27, 21, 14, 0, 2, 12, 6, 8, 10, 4, 30, 16, 18, 28, 22, 24, 26, 20, 15, 1, 3, 13, 7, 9, 11, 5},
				{17, 19, 29, 31, 25, 27, 21, 23, 0, 2, 12, 14, 8, 10, 4, 6, 16, 18, 28, 30, 24, 26, 20, 22, 1, 3, 13, 15, 9, 11, 5, 7},
				{19, 29, 31, 17, 27, 21, 23, 25, 2, 12, 14, 0, 10, 4, 6, 8, 18, 28, 30, 16, 26, 20, 22, 24, 3, 13, 15, 1, 11, 5, 7, 9},
				{19, 27, 2, 10, 18, 26, 3, 11, 29, 21, 12, 4, 28, 20, 13, 5, 31, 23, 14, 6, 30, 22, 15, 7, 17, 25, 0, 8, 16, 24, 1, 9},
				{27, 2, 10, 19, 26, 3, 11, 18, 21, 12, 4, 29, 20, 13, 5, 28, 23, 14, 6, 31, 22, 15, 7, 30, 25, 0, 8, 17, 24, 1, 9, 16},
				{2, 10, 19, 27, 3, 11, 18, 26, 12, 4, 29, 21, 13, 5, 28, 20, 14, 6, 31, 23, 15, 7, 30, 22, 0, 8, 17, 25, 1, 9, 16, 24},
				{10, 19, 27, 2, 11, 18, 26, 3, 4, 29, 21, 12, 5, 28, 20, 13, 6, 31, 23, 14, 7, 30, 22, 15, 8, 17, 25, 0, 9, 16, 24, 1}
			}};
			
			// LITTLE ENDIAN:
			static constexpr std::array<std::array<uint8_t, 32>, 16> n_V_little_endian = {{
				{12, 8, 4, 0, 28, 24, 20, 16, 13, 9, 5, 1, 29, 25, 21, 17, 14, 10, 6, 2, 30, 26, 22, 18, 15, 11, 7, 3, 31, 27, 23, 19},
				{0, 12, 8, 4, 16, 28, 24, 20, 1, 13, 9, 5, 17, 29, 25, 21, 2, 14, 10, 6, 18, 30, 26, 22, 3, 15, 11, 7, 19, 31, 27, 23},
				{4, 0, 12, 8, 20, 16, 28, 24, 5, 1, 13, 9, 21, 17, 29, 25, 6, 2, 14, 10, 22, 18, 30, 26, 7, 3, 15, 11, 23, 19, 31, 27},
				{8, 4, 0, 12, 24, 20, 16, 28, 9, 5, 1, 13, 25, 21, 17, 29, 10, 6, 2, 14, 26, 22, 18, 30, 11, 7, 3, 15, 27, 23, 19, 31},
				{29, 13, 28, 12, 31, 15, 30, 14, 17, 1, 16, 0, 19, 3, 18, 2, 21, 5, 20, 4, 23, 7, 22, 6, 25, 9, 24, 8, 27, 11, 26, 10},
				{12, 29, 13, 28, 14, 31, 15, 30, 0, 17, 1, 16, 2, 19, 3, 18, 4, 21, 5, 20, 6, 23, 7, 22, 8, 25, 9, 24, 10, 27, 11, 26},
				{28, 12, 29, 13, 30, 14, 31, 15, 16, 0, 17, 1, 18, 2, 19, 3, 20, 4, 21, 5, 22, 6, 23, 7, 24, 8, 25, 9, 26, 10, 27, 11},
				{13, 28, 12, 29, 15, 30, 14, 31, 1, 16, 0, 17, 3, 18, 2, 19, 5, 20, 4, 21, 7, 22, 6, 23, 9, 24, 8, 25, 11, 26, 10, 27},
				{19, 17, 31, 29, 27, 25, 23, 21, 2, 0, 14, 12, 10, 8, 6, 4, 18, 16, 30, 28, 26, 24, 22, 20, 3, 1, 15, 13, 11, 9, 7, 5},
				{29, 19, 17, 31, 21, 27, 25, 23, 12, 2, 0, 14, 4, 10, 8, 6, 28, 18, 16, 30, 20, 26, 24, 22, 13, 3, 1, 15, 5, 11, 9, 7},
				{31, 29, 19, 17, 23, 21, 27, 25, 14, 12, 2, 0, 6, 4, 10, 8, 30, 28, 18, 16, 22, 20, 26, 24, 15, 13, 3, 1, 7, 5, 11, 9},
				{17, 31, 29, 19, 25, 23, 21, 27, 0, 14, 12, 2, 8, 6, 4, 10, 16, 30, 28, 18, 24, 22, 20, 26, 1, 15, 13, 3, 9, 7, 5, 11},
				{10, 2, 27, 19, 11, 3, 26, 18, 4, 12, 21, 29, 5, 13, 20, 28, 6, 14, 23, 31, 7, 15, 22, 30, 8, 0, 25, 17, 9, 1, 24, 16},
				{19, 10, 2, 27, 18, 11, 3, 26, 29, 4, 12, 21, 28, 5, 13, 20, 31, 6, 14, 23, 30, 7, 15, 22, 17, 8, 0, 25, 16, 9, 1, 24},
				{27, 19, 10, 2, 26, 18, 11, 3, 21, 29, 4, 12, 20, 28, 5, 13, 23, 31, 6, 14, 22, 30, 7, 15, 25, 17, 8, 0, 24, 16, 9, 1},
				{2, 27, 19, 10, 3, 26, 18, 11, 12, 21, 29, 4, 13, 20, 28, 5, 14, 23, 31, 6, 15, 22, 30, 7, 0, 25, 17, 8, 1, 24, 16, 9}
			}};

			static consteval std::array<std::array<uint8_t, 32>, 16> get_n_V();
	private: 
			// constant array used in the transformation of the key
			uint32_t A[8] = {
				0x184f03e9, 
				0x216c46df,
				0x119f904f,
				0x64997dfd,
				0x2a5497bd,
				0x3918fa83,
				0xaf820335,
				0x85096c2e,
			};
			
			// for modular addition in a Prime Galois Field, field size p, largest 32-bit unsigned prime number
			static const constexpr uint32_t fp = 4294967291; // 0xfffffffb
		
			// static permutation vector V
			static const constexpr uint8_t V[] = {
				17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30,
				 1,  0,  3,  2,  5,  4,  7,  6,  9,  8, 11, 10, 13, 12, 15, 14
			};
		
			/*
			// indexes represented as constant when rotated V right by n
			static const constexpr uint8_t n_V[][32] = {
			//		{3, 0, 5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 15, 12, 17, 14, 19, 16, 21, 18, 23, 20, 25, 22, 27, 24, 29, 26, 31, 28, 1, 30},
			//		{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1},
			//		{5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 15, 12, 17, 14, 19, 16, 21, 18, 23, 20, 25, 22, 27, 24, 29, 26, 31, 28, 1, 30, 3, 0},
			//		{7, 4, 9, 6, 11, 8, 13, 10, 15, 12, 17, 14, 19, 16, 21, 18, 23, 20, 25, 22, 27, 24, 29, 26, 31, 28, 1, 30, 3, 0, 5, 2},
			//		{9, 6, 11, 8, 13, 10, 15, 12, 17, 14, 19, 16, 21, 18, 23, 20, 25, 22, 27, 24, 29, 26, 31, 28, 1, 30, 3, 0, 5, 2, 7, 4},
			//		{13, 10, 15, 12, 17, 14, 19, 16, 21, 18, 23, 20, 25, 22, 27, 24, 29, 26, 31, 28, 1, 30, 3, 0, 5, 2, 7, 4, 9, 6, 11, 8},
			//		{15, 12, 17, 14, 19, 16, 21, 18, 23, 20, 25, 22, 27, 24, 29, 26, 31, 28, 1, 30, 3, 0, 5, 2, 7, 4, 9, 6, 11, 8, 13, 10},
			//		{19, 16, 21, 18, 23, 20, 25, 22, 27, 24, 29, 26, 31, 28, 1, 30, 3, 0, 5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 15, 12, 17, 14},
			//		{21, 18, 23, 20, 25, 22, 27, 24, 29, 26, 31, 28, 1, 30, 3, 0, 5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 15, 12, 17, 14, 19, 16},
			//		{25, 22, 27, 24, 29, 26, 31, 28, 1, 30, 3, 0, 5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 15, 12, 17, 14, 19, 16, 21, 18, 23, 20},
			//		{31, 28, 1, 30, 3, 0, 5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 15, 12, 17, 14, 19, 16, 21, 18, 23, 20, 25, 22, 27, 24, 29, 26},
			//		{1, 30, 3, 0, 5, 2, 7, 4, 9, 6, 11, 8, 13, 10, 15, 12, 17, 14, 19, 16, 21, 18, 23, 20, 25, 22, 27, 24, 29, 26, 31, 28},
		
				// random permutation: less collissions
				//{4, 13, 11, 3, 31, 0, 9, 29, 6, 1, 14, 12, 18, 8, 17, 28, 23, 2, 10, 21, 27, 25, 30, 20, 26, 7, 5, 22, 24, 19, 15, 16},
				//{20, 5, 25, 11, 16, 7, 6, 10, 27, 24, 22, 26, 13, 1, 2, 8, 23, 0, 29, 4, 12, 28, 15, 18, 14, 30, 9, 19, 31, 3, 17, 21}, 
				//{7, 31, 13, 6, 25, 20, 11, 29, 18, 0, 8, 19, 10, 17, 21, 12, 16, 3, 2, 9, 4, 30, 24, 5, 23, 15, 22, 28, 26, 27, 14, 1},
				//{23, 30, 31, 25, 21, 19, 28, 3, 8, 13, 18, 2, 17, 0, 14, 4, 11, 22, 24, 16, 6, 15, 9, 27, 20, 26, 5, 12, 7, 10, 29, 1},
				//{22, 18, 15, 1, 4, 26, 3, 21, 23, 29, 11, 16, 10, 14, 12, 8, 0, 24, 13, 30, 6, 19, 2, 17, 9, 5, 7, 20, 31, 25, 27, 28},
				//{14, 15, 13, 9, 23, 16, 8, 20, 1, 12, 29, 2, 27, 17, 4, 31, 0, 10, 26, 30, 11, 19, 6, 3, 24, 25, 22, 5, 7, 28, 21, 18},
				//{11, 7, 3, 5, 6, 20, 25, 23, 30, 0, 22, 15, 27, 10, 12, 21, 19, 13, 8, 24, 29, 31, 4, 1, 28, 16, 26, 9, 2, 14, 18, 17},
				//{7, 13, 19, 8, 28, 23, 16, 0, 5, 10, 24, 31, 18, 4, 1, 30, 2, 27, 12, 11, 26, 15, 3, 6, 22, 21, 14, 9, 29, 20, 17, 25},
				//{16, 1, 8, 28, 7, 2, 18, 30, 13, 24, 29, 11, 4, 22, 20, 3, 23, 0, 10, 26, 21, 5, 27, 25, 12, 17, 9, 14, 19, 15, 31, 6},
				//{29, 9, 10, 12, 15, 4, 25, 6, 14, 22, 31, 5, 16, 30, 0, 24, 17, 23, 28, 7, 13, 26, 21, 3, 27, 18, 20, 19, 11, 8, 1, 2},
				//{14, 6, 15, 23, 4, 26, 28, 29, 5, 19, 9, 8, 13, 10, 1, 16, 24, 12, 30, 7, 20, 3, 31, 2, 17, 22, 27, 11, 25, 21, 18, 0},
				//{19, 21, 18, 13, 28, 5, 12, 11, 15, 1, 9, 17, 4, 24, 7, 16, 26, 14, 23, 30, 8, 0, 2, 27, 20, 6, 29, 25, 10, 31, 22, 3},
				//{0, 30, 14, 3, 28, 7, 23, 25, 1, 12, 2, 9, 5, 21, 31, 10, 16, 11, 17, 24, 6, 4, 29, 19, 8, 13, 27, 22, 18, 26, 15, 20},
				//{24, 15, 8, 3, 13, 6, 1, 17, 28, 0, 23, 14, 30, 25, 19, 12, 9, 20, 16, 2, 21, 22, 31, 18, 7, 29, 4, 27, 11, 26, 5, 10},
				//{20, 4, 21, 27, 12, 15, 9, 26, 8, 13, 19, 28, 25, 10, 22, 16, 23, 5, 7, 6, 17, 11, 24, 14, 3, 2, 1, 29, 30, 18, 0, 31},
				//{27, 1, 18, 30, 20, 17, 21, 9, 0, 4, 8, 12, 31, 14, 10, 2, 5, 11, 3, 6, 22, 19, 13, 16, 28, 26, 15, 23, 24, 25, 7, 29}
			};
*/
		
			/* calculated permutation: wanted indexes (old)
			[18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 0, 31, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15], 
			[20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 0, 31, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17],
			[23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20],
			[28, 27, 30, 29, 0, 31, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25],
			[3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 1, 0],
			[14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 0, 31, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11],
			[27, 26, 29, 28, 31, 30, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24],
			[12, 11, 14, 13, 16, 15, 18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 0, 31, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9],
			[31, 30, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28],
			[22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 0, 31, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15, 18, 17, 20, 19],
			[19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14, 17, 16],
			[18, 17, 20, 19, 22, 21, 24, 23, 26, 25, 28, 27, 30, 29, 0, 31, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15],
			 */
		
		
			// dynamic permutation number n
			static const constexpr uint8_t nl = 12; // number of primes till keysize (m). represented by l
			static const constexpr uint8_t n[nl] = {
				1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31
			};
		
			// rotation index r
			static const constexpr uint8_t r[] = {
				23, 5, 17, 31, 13
			};
		
			// bitwise right rotation
			static inline uint32_t rotr(uint32_t x, uint8_t shift);
		
			// bitwise left rotation
			static inline uint32_t lotr(uint32_t x, uint8_t shift);
		
			// initial key, before any permutation
			uint8_t *init_key;
		
			// initial static permutation of the key
			// key: initial key before any permutations
			void static_permutation(uint8_t *key);
		
			// dynamically permutate the key during iteration
			// key: permutated 32-byte key
			// p: dynamically re-purmutated key
			// ni: index of dynamic permutation number n
			// ni: iteration index
			void dynamic_permutation(uint8_t *key, uint8_t *p, uint8_t ni);
		
			// iterations for the main transformation loop
			void transformation(uint8_t *key); // length of k is 8
		
			// safely delete the inital key
			bool terminate_k = false;

	public:
			// if you want the destructor called to safely destroy key after use is over
			// this is to make sure that the key is deleted safely and that the ownership of the init_key isn't managed somewhere else
			inline void terminate() noexcept;

			const constexpr static uint8_t keysize = 32;

			FullTimePad(uint8_t *initial_key);

			// key: 256-bit (32-byte) key, should be allocated with length keysize
			void hash(uint8_t *key);

			// encrypt/decrypt
			// key is the initial key, return heap allocated key output
			// pt: plaintext data
			// ct: ciphertext data
			// length: length of pt, and ct
			// encryption_index: each encrypted value needs it's own encryption index to keep keys unieqe and to avoid collisions
			void transform(uint8_t *pt, uint8_t *ct, uint32_t length, uint32_t encryption_index);

			// Destructor
			~FullTimePad();
};

#endif /* FULLTIMEPAD_H */
