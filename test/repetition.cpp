/*
 * Author: Taha
 * Date: Feb 6, 2025
 *
 * Full-Time-Pad Symmetric Stream Cipher
 *  Copyright (C) 2025  Taha
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 * This file has 3 functions for cryptoanalysis. They all test for matrix (256 generated Full-Time-Pad 2.0 keys with 1-bit difference) and sha256 hashes (or any other verified random data, have to use insecure rng in  gen_rand_matrix since c++ doesn't have a secure rng). 
 * This test was conducted as I thought I saw certain patterns. Comparing to verified-random data, the numbers being similiar means the data is close. It also helps to print each value and visualize them for more accuracy. I didn't see any patterns. If you want to check them uncomment PRINT_MATRIX macro on line 31. It might help to graph this data to better visuallize but I haven't seen any obvious patterns.
 *
 * Simply put this file is for verifying data bias. 
 */

#include <iostream>
#include <stdint.h>
#include <cstring>
#include <iomanip>
#include <array>
#include <random>

#include "../fulltimepad.h"

// #define PRINT_MATRIX

// cross check how many collisions per 4-bits
template<uint32_t len=256>
double cross_check_matrix(std::array<std::array<uint8_t, 32>, len>  matrix, double *collisions_i)
{
	memset(collisions_i, 0, 31*sizeof(double));

	double avg = 0; // average collision rate overall
	for(uint8_t j=1;j<32;j++) { // 0
		for(uint32_t i=1;i<len;i++) {
			uint8_t half1 = matrix[i][j] & 0x0f; // first half: 0000(1111)
			uint8_t half2 = matrix[i][j]>>4; // second half (0000)1111

			uint8_t prev_half1 = matrix[i-1][j] & 0x0f; // first half: 0000(1111)
			uint8_t prev_half2 = matrix[i-1][j]>>4; // second half (0000)1111

			// compare the values on the sides
			uint8_t side_half1 = matrix[i-1][j-1] & 0x0f; // first half: 0000(1111)
			uint8_t side_half2 = matrix[i-1][j-1]>>4; // second half (0000)1111
			
			// cross check if equal to prev halves and check if equal to side halves
			if(half1 == prev_half1 || half1 == prev_half2 ||
			   half2 == prev_half1 || half2 == prev_half2 || 
			   half2 == side_half1 || half2 == side_half2) {
				collisions_i[j-1]++;
			}
		}
		collisions_i[j-1]/=len-1;
		avg += collisions_i[j-1];
	}

	return avg/31; // average number of collisions
}

template<uint32_t len=256>
void analyze_cross_check(std::array<std::array<uint8_t, 32>, len> matrix)
{
	double *collisions_i = new double[31]; // collisions per index, avg per byte
	double avg = cross_check_matrix<len>(matrix, collisions_i);

	std::cout << std::endl;
	uint32_t fail_rate = 0;
	for(uint32_t i=0;i<31;i++) {
		std::cout << std::fixed << std::setprecision(3) << collisions_i[i] << " ";

		uint32_t tmp = (collisions_i[i]*10);
		if(tmp < 2 || tmp > 4) { // 3 +- 1
			fail_rate++;
		}
	}
	std::cout << std::endl << "avg: " << avg << "\n";
	if((uint32_t)(avg*10) == 3) {
		std::cout << "PASSED (cross_check): Cross Check Average Collision Count Normal";
	} else {
		std::cout << "FAILED (cross_check): cross check average collisions count abnormal";
	}
	std::cout << std::endl;
	if(fail_rate) {
		std::cout << "FAILED (cross_check): cross check test has a " << (double)fail_rate/31*100 << "% failrate";
	} else {
		std::cout << "PASSED (cross_check): Cross Check Test Passed for All Bytes of the Key";
	}

	delete[] collisions_i;
}

// generate a random matrix passed through the fulltimepad algorithm
template<uint32_t len=256>
void gen_rand_matrix_fulltimepad(std::array<std::array<uint8_t, 32>, len> &rmatrix) {
	for(uint32_t i=0;i<len;i++) {
		std::random_device rd;
		std::mt19937 gen(rd());
		std::uniform_int_distribution<uint8_t> dist(0, 0xff);
		for(uint8_t j=0;j<32;j++) rmatrix[i][j] = dist(gen);
		FullTimePad fulltimepad = FullTimePad((uint8_t*)&rmatrix[i][0]);
		fulltimepad.hash<FullTimePad::Version20>(&rmatrix[i][0], 0);
	}
}

// generate a matrix, non-random keys passed through the fulltimepad algorithm
template<uint32_t len=256>
void gen_uniform_matrix_fulltimepad(std::array<std::array<uint8_t, 32>, len> &rmatrix) {
	for(uint32_t i=0;i<len;i++) {
		std::random_device rd;
		std::mt19937 gen(rd());
		std::uniform_int_distribution<uint8_t> dist(0, 0xff);
		for(uint8_t j=0;j<32;j++) rmatrix[i][j] = j;
		FullTimePad fulltimepad = FullTimePad((uint8_t*)&rmatrix[i][0]);
		fulltimepad.hash<FullTimePad::Version20>(&rmatrix[i][0], i);
	}
}

// generate a random matrix (not cryptographically secure random but this doesn't matter for this test)
template<uint32_t len=256>
void gen_rand_matrix(std::array<std::array<uint8_t, 32>, len> &rmatrix) {
	for(uint32_t i=0;i<len;i++) {
		std::random_device rd;
		std::mt19937 gen(rd());
		std::uniform_int_distribution<uint8_t> dist(0, 0xff);
		for(uint8_t j=0;j<32;j++) rmatrix[i][j] = dist(gen);
	}
}

// check how many repetitions each value has in the matrix
// e.g. how many times matrix[0][0] exists in matrix
template<uint32_t len=256>
uint32_t *check_repetitions(std::array<std::array<uint8_t, 32>, len> matrix) {
	double counter[len][32];
	std::vector<std::vector<uint8_t>> unique(len);
	for(uint32_t i=0;i<len;i++) {
		memset(counter[i], 0, 32*sizeof(double));
		unique[i].insert(unique[i].end(), &matrix[i][0], &matrix[i][0]+32); // copy the matrix
	}

	// store matrix in vector matrix (copied). Remove values when needed, counter's length is dynamically determined
	// Length of counter should be the number of uneiqe values.
	double rate = 0; // average rate
	for(uint32_t i=0;i<len;i++) {
		for(uint8_t j=0;j<unique[i].size();j++) {
			for(uint32_t k=0;k<len;k++) {
				for(uint8_t n=0;n<unique[k].size();n++) {
					if (unique[i][j] == unique[k][n] && k != i && n != j) {
						counter[i][j]++;
						unique[k].erase(unique[k].begin() + n); // remove nth element so it doesn't find it again
					}
				}
			}
			//counter[i][j]/=unique[i].size();
			rate+=counter[i][j];
		}
	}

	// TODO:
	// analyze which values are larger than the average +- accuracy number in the counter matrix. 
	// This could tell us which values are irregular and might need further checks
	
	uint32_t repetitions=0; // number of repeated values out of a pool of len*32 values.
	for(uint32_t i=0;i<len;i++) {
		for(uint8_t j=0;j<32;j++) {
				if(counter[i][j] != 0) {
					repetitions++;
#ifdef PRINT_MATRIX
					std::cout << counter[i][j] << " ";
#endif
				}
		}
	}
	rate/=len*32; // calculate average rate
	rate*=100; // %
	

	// count: number of unique bytes in matrix that repeated
	std::cout << "count (check_repetitions): " << repetitions << " | rate of repetition: " << rate << "%";
	uint32_t *out = new uint32_t[2]; // return for analyzing in another function
	out[0] = repetitions;
	out[1] = rate;
	return out;
}

// analyze whether tests passed/failed
void analyze_repetition(uint32_t *out1, uint32_t *out2)
{
	uint32_t repetitions1 = out1[0];
	uint32_t repetitions2 = out2[0];
	uint32_t rate1 = out1[1];
	uint32_t rate2 = out2[1];

	if(repetitions1/100 == repetitions2/100) { // an approximate estimation determined experimentally
		std::cout << std::endl << "PASSED (check_repetitions): Expected Count of Repeated Unique Bytes in Matrix";
	} else {
		std::cout << std::endl << "FAILED (check_repetitions): Unexpected count of repeated unique bytes in matrix";
	}

	if(rate1 == rate2) {
		std::cout << std::endl << "PASSED (check_repetitions): Expected Rate of Repetitions";
	} else {
		std::cout << std::endl << "FAILED (check_repetitions): Unexpected rate of repetitions";
	}
	std::cout << std::endl;

	delete[] out1;
	delete[] out2;
}

// check which values are more common (0-256). Not ordered by byte
// e.g. how many instances of 0x00, 0x01, etc found in matrix.
// This can tell us potential data bias
template<uint32_t len=256>
void check_common(std::array<std::array<uint8_t, 32>, len> matrix)
{
	double instances[256]; // number of instances of k found in matrix
	memset(instances, 0, 256*sizeof(double));

	for(uint32_t i=0;i<len;i++) {
		for(uint8_t j=0;j<32;j++) {
			for(uint16_t k=0;k<256;k++) { // all numbers in uint8_t
				if(matrix[i][j] == k) {
					instances[k]++;
					break;
				}
			}
		}
	}

	// analyze the data, chances of each instance should be around the same. they should all be divided by 256 to get the chances at which they are equal to k=0-256
	static constexpr double goal_rate = 1.0/256;
	static uint32_t goal1000 = round(goal_rate*1000);
	double avg = 0;
	for(uint16_t k=0;k<256;k++) {
		instances[k]/=len*32; // 8192 (len*32) bytes checked, get average
#ifdef PRINT_MATRIX
		std::cout << std::setprecision(6) << instances[k] << " "; // all values should be around 1/256
#endif
		avg+=instances[k];
	}
	avg/=256;
	std::cout << std::endl << "avg (check_common):" << avg << "\n";
	
	// Check if avg is good, equal to goal_rate. cout PASSED/FAILED. check each value, maybe graph them to further analyze
	if(avg == goal_rate) {
		std::cout << "PASSED (check_common): Data Average is Random";
	} else {
		std::cout << "POTENTIAL FAILURE (check_common): Data might not be random, requires manual analysis.";
	}
	std::cout << "\n";
	
	// Analyze each individual data by checking a range
	uint16_t fail_rate = 0;
	for(uint16_t k=0;k<256;k++) {
		std::stringstream ss;
		ss << std::setprecision(4) << instances[k];
		double instance; // rounded instance
		ss >> instance;
		instance = round(instance*1000); // round *1000 for rounding to 4th digit since instance[k] is around 0.00(x)xxx
		if(instance > goal1000+2 || instance < goal1000-2) { // +-2 is precision (determined experimentally)
				std::cout << "  k:" << k << " (" <<  instance << ")";
				fail_rate++; // potential fail rate, not too accurate, mainly ignore it unless it's higher. But still analyze further to check if the fail should be expected
		}
	}
	
	if(fail_rate) {
			double frate = (double)fail_rate/256*100;

			// if 8 fails or more, high rail rate
			std::cout << "\nFAILED (check_common - " << frate << "% | " << (frate < 8.0/256*100 ? "LOW" : "HIGH") << " FAILRATE): Data at some instances failed. Instances denoted above";
	} else {
			std::cout << "PASSED (check_common): All Instances Random";
	}
	std::cout << "\n";
}

int main()
{
	static constexpr uint32_t nkeys = 256;

	std::array<std::array<uint8_t, 32>, nkeys> matrix;
	
	// default sha-256 generated values. Should be secure random numbers, the goal is to make sure that fulltimepad generates the same rates in the check functions
	std::array<std::array<uint8_t, 32>, nkeys> matrix_rand = {{
		{99, 13, 205, 41, 102, 196, 51, 102, 145, 18, 84, 72, 187, 178, 91, 79, 244, 18, 164, 156, 115, 45, 178, 200, 171, 193, 184, 88, 27, 215, 16, 221},
		{202, 194, 245, 149, 120, 22, 48, 228, 233, 41, 198, 249, 213, 171, 57, 134, 200, 97, 215, 49, 180, 198, 203, 134, 131, 128, 53, 60, 72, 232, 13, 97},
		{151, 27, 47, 116, 163, 158, 161, 191, 213, 66, 139, 196, 48, 1, 193, 12, 244, 230, 104, 105, 135, 145, 24, 136, 141, 74, 58, 225, 185, 14, 254, 235},
		{177, 9, 32, 6, 19, 210, 214, 95, 133, 90, 43, 244, 82, 147, 248, 52, 130, 93, 99, 54, 102, 99, 109, 34, 176, 111, 180, 198, 8, 155, 223, 194},
		{135, 250, 223, 59, 162, 198, 14, 121, 103, 2, 82, 127, 1, 122, 199, 132, 51, 33, 87, 250, 16, 198, 0, 243, 80, 125, 3, 153, 156, 173, 26, 194},
		{162, 44, 145, 118, 118, 175, 128, 80, 140, 116, 112, 152, 161, 253, 125, 34, 66, 51, 185, 143, 84, 66, 193, 53, 241, 6, 221, 214, 119, 58, 1, 129},
		{236, 161, 160, 254, 218, 80, 63, 128, 176, 71, 36, 241, 149, 192, 5, 178, 200, 208, 52, 62, 124, 128, 188, 120, 59, 58, 25, 74, 223, 201, 37, 53},
		{225, 222, 44, 126, 69, 79, 40, 19, 54, 122, 51, 124, 227, 199, 100, 101, 229, 0, 124, 99, 123, 232, 71, 196, 188, 241, 105, 251, 7, 89, 33, 22},
		{177, 215, 237, 207, 161, 98, 82, 209, 221, 27, 233, 249, 6, 146, 157, 146, 93, 84, 221, 176, 250, 246, 181, 215, 187, 99, 10, 188, 69, 231, 70, 215},
		{183, 228, 79, 27, 241, 90, 139, 159, 109, 159, 212, 244, 221, 171, 4, 176, 56, 61, 154, 37, 222, 9, 78, 103, 57, 93, 211, 223, 44, 104, 28, 170},
		{5, 37, 27, 195, 75, 174, 170, 73, 108, 137, 184, 145, 163, 26, 164, 95, 231, 174, 124, 52, 229, 194, 48, 196, 228, 210, 53, 152, 232, 243, 118, 101},
		{229, 181, 182, 117, 82, 107, 123, 87, 182, 17, 140, 253, 164, 23, 128, 173, 212, 246, 185, 4, 125, 192, 41, 56, 232, 18, 83, 241, 0, 126, 198, 67},
		{245, 254, 219, 149, 173, 56, 92, 161, 59, 67, 221, 171, 38, 54, 228, 127, 121, 57, 51, 162, 150, 139, 157, 138, 192, 132, 0, 186, 171, 81, 10, 186},
		{93, 156, 83, 192, 160, 253, 156, 134, 154, 210, 102, 201, 228, 170, 41, 179, 99, 94, 180, 129, 200, 230, 235, 88, 191, 161, 155, 235, 122, 202, 65, 81},
		{67, 189, 39, 8, 48, 87, 8, 163, 39, 183, 103, 117, 101, 80, 70, 67, 136, 43, 148, 53, 72, 71, 49, 32, 134, 111, 83, 154, 196, 17, 130, 247},
		{148, 5, 56, 120, 6, 23, 110, 15, 138, 147, 152, 130, 119, 174, 234, 48, 228, 154, 27, 37, 68, 222, 147, 205, 105, 181, 232, 121, 47, 59, 65, 70},
		{37, 88, 60, 49, 160, 155, 55, 247, 145, 208, 65, 201, 253, 7, 251, 34, 59, 202, 13, 253, 150, 139, 141, 72, 178, 53, 85, 158, 63, 139, 69, 190},
		{226, 252, 251, 253, 15, 74, 172, 223, 41, 141, 91, 227, 172, 72, 219, 146, 17, 70, 16, 70, 219, 127, 68, 72, 193, 203, 199, 183, 57, 104, 78, 16},
		{186, 42, 92, 78, 53, 11, 203, 159, 57, 128, 208, 67, 66, 13, 187, 12, 26, 29, 172, 57, 124, 190, 95, 95, 133, 48, 225, 151, 199, 217, 155, 78},
		{92, 203, 81, 229, 68, 2, 166, 223, 103, 25, 208, 130, 37, 106, 209, 105, 82, 215, 152, 178, 160, 121, 224, 164, 214, 170, 119, 74, 27, 197, 15, 171},
		{233, 183, 124, 149, 210, 83, 73, 27, 172, 17, 196, 50, 3, 234, 46, 155, 152, 88, 68, 67, 113, 219, 213, 45, 129, 111, 94, 146, 181, 203, 109, 85},
		{74, 237, 238, 9, 219, 126, 243, 247, 145, 157, 54, 191, 255, 60, 201, 63, 28, 245, 229, 84, 252, 120, 44, 206, 48, 85, 234, 97, 65, 125, 83, 175},
		{190, 166, 209, 165, 25, 255, 86, 151, 146, 19, 218, 39, 119, 137, 160, 211, 148, 169, 79, 34, 221, 124, 55, 181, 80, 108, 208, 41, 121, 142, 6, 47},
		{28, 80, 22, 214, 19, 224, 0, 227, 183, 84, 136, 134, 138, 166, 125, 220, 17, 0, 21, 16, 5, 128, 62, 16, 104, 95, 160, 170, 39, 76, 192, 221},
		{85, 147, 176, 163, 246, 167, 248, 80, 9, 239, 55, 191, 114, 236, 219, 114, 240, 71, 172, 243, 137, 53, 154, 25, 96, 75, 107, 79, 20, 229, 221, 85},
		{84, 96, 119, 165, 116, 42, 70, 179, 15, 208, 97, 160, 65, 107, 182, 31, 92, 106, 142, 57, 199, 189, 174, 34, 186, 178, 227, 87, 131, 109, 99, 248},
		{37, 23, 189, 62, 207, 248, 222, 252, 40, 145, 147, 206, 7, 188, 82, 104, 7, 8, 80, 151, 243, 95, 240, 67, 114, 45, 115, 1, 196, 67, 95, 50},
		{202, 30, 161, 1, 123, 7, 150, 176, 41, 23, 119, 121, 141, 66, 77, 132, 38, 237, 31, 223, 178, 231, 39, 245, 73, 199, 5, 13, 87, 230, 153, 15},
		{146, 233, 114, 80, 141, 179, 116, 61, 89, 104, 176, 201, 184, 167, 115, 223, 107, 64, 49, 18, 25, 37, 167, 185, 236, 35, 12, 16, 46, 5, 114, 119},
		{110, 0, 89, 18, 24, 95, 96, 102, 68, 227, 145, 213, 210, 247, 95, 196, 44, 228, 97, 22, 223, 230, 171, 195, 182, 232, 107, 252, 136, 164, 31, 155},
		{127, 247, 162, 203, 76, 179, 251, 215, 162, 91, 202, 80, 99, 223, 111, 32, 117, 199, 58, 110, 108, 45, 122, 219, 162, 22, 147, 123, 133, 161, 179, 48},
		{251, 30, 156, 162, 80, 12, 82, 50, 176, 43, 246, 152, 145, 147, 74, 148, 22, 63, 162, 90, 124, 170, 7, 65, 240, 242, 88, 70, 81, 139, 8, 68},
		{44, 146, 188, 208, 86, 148, 208, 232, 158, 85, 21, 109, 78, 33, 78, 129, 8, 110, 12, 178, 241, 14, 222, 194, 239, 213, 54, 157, 114, 11, 100, 98},
		{90, 179, 66, 87, 17, 15, 31, 110, 24, 117, 165, 117, 38, 95, 127, 202, 148, 78, 127, 88, 71, 114, 252, 19, 156, 18, 28, 238, 215, 80, 154, 233},
		{180, 47, 130, 208, 133, 189, 27, 225, 210, 239, 240, 183, 24, 208, 253, 126, 105, 13, 152, 171, 155, 97, 67, 88, 55, 89, 164, 182, 228, 65, 127, 226},
		{108, 103, 249, 190, 118, 197, 161, 238, 83, 92, 39, 214, 126, 210, 93, 52, 46, 61, 203, 116, 38, 85, 50, 255, 114, 104, 240, 141, 103, 132, 243, 29},
		{240, 245, 134, 118, 247, 147, 126, 251, 18, 231, 220, 182, 217, 137, 232, 29, 36, 84, 171, 8, 70, 128, 251, 116, 20, 235, 39, 183, 36, 187, 42, 141},
		{38, 72, 118, 47, 138, 135, 182, 229, 158, 87, 107, 219, 2, 175, 238, 94, 94, 234, 1, 238, 92, 159, 75, 119, 242, 68, 150, 143, 42, 14, 65, 19},
		{110, 210, 98, 5, 208, 182, 183, 63, 235, 232, 151, 94, 196, 182, 236, 180, 73, 228, 239, 54, 156, 40, 162, 243, 100, 115, 159, 167, 248, 158, 125, 201},
		{117, 38, 224, 12, 206, 236, 238, 123, 135, 145, 48, 230, 41, 44, 198, 207, 36, 150, 172, 38, 118, 160, 80, 155, 169, 67, 124, 118, 196, 205, 0, 58},
		{76, 135, 189, 210, 153, 163, 115, 26, 105, 130, 216, 34, 85, 241, 170, 219, 248, 74, 43, 82, 43, 238, 116, 17, 35, 7, 171, 187, 127, 22, 196, 131},
		{88, 16, 53, 24, 40, 47, 72, 197, 88, 69, 109, 27, 39, 77, 67, 105, 92, 42, 166, 247, 34, 8, 20, 64, 120, 73, 16, 46, 30, 106, 62, 207},
		{70, 153, 218, 88, 59, 5, 109, 77, 107, 37, 32, 113, 204, 212, 77, 204, 50, 71, 147, 59, 167, 219, 58, 39, 118, 106, 177, 151, 24, 68, 199, 5},
		{196, 160, 52, 231, 173, 64, 50, 133, 252, 219, 245, 192, 253, 4, 77, 156, 71, 107, 235, 46, 23, 66, 87, 213, 133, 225, 6, 239, 70, 135, 70, 247},
		{44, 191, 22, 108, 77, 169, 72, 219, 184, 230, 22, 250, 65, 207, 181, 240, 218, 47, 153, 118, 131, 217, 128, 139, 212, 173, 64, 142, 56, 140, 236, 99},
		{94, 85, 130, 171, 31, 101, 60, 43, 164, 10, 162, 201, 191, 55, 173, 119, 2, 51, 181, 165, 39, 21, 116, 192, 110, 150, 147, 95, 230, 200, 163, 153},
		{31, 175, 246, 4, 82, 156, 71, 92, 127, 224, 238, 184, 42, 229, 132, 56, 205, 189, 161, 222, 130, 79, 34, 161, 62, 151, 150, 24, 0, 179, 62, 80},
		{166, 15, 169, 129, 93, 2, 87, 219, 130, 176, 187, 80, 192, 14, 35, 20, 37, 82, 216, 30, 29, 178, 174, 164, 248, 141, 236, 143, 77, 54, 91, 137},
		{90, 196, 13, 216, 211, 2, 133, 157, 189, 205, 103, 215, 91, 205, 89, 147, 91, 39, 228, 99, 251, 97, 156, 142, 209, 237, 72, 74, 148, 93, 220, 155},
		{172, 12, 247, 44, 1, 35, 52, 113, 33, 174, 68, 12, 119, 15, 174, 82, 1, 132, 32, 145, 200, 233, 63, 182, 55, 254, 125, 251, 169, 222, 85, 88},
		{203, 41, 7, 214, 78, 169, 212, 61, 8, 241, 255, 11, 41, 17, 52, 24, 30, 251, 243, 148, 74, 154, 141, 23, 107, 193, 136, 214, 210, 41, 42, 174},
		{67, 235, 19, 158, 136, 69, 11, 169, 29, 198, 221, 222, 165, 107, 40, 77, 222, 255, 62, 219, 187, 106, 115, 144, 193, 194, 59, 168, 218, 98, 193, 254},
		{43, 25, 172, 58, 208, 234, 95, 55, 147, 242, 18, 127, 254, 99, 68, 69, 204, 60, 156, 194, 33, 94, 175, 167, 102, 6, 24, 85, 102, 33, 207, 149},
		{82, 162, 48, 97, 80, 45, 100, 202, 138, 22, 24, 189, 145, 116, 64, 128, 196, 150, 122, 108, 130, 110, 31, 12, 228, 130, 192, 225, 204, 23, 15, 181},
		{165, 68, 220, 67, 39, 13, 54, 93, 15, 88, 210, 204, 140, 5, 72, 234, 158, 21, 195, 103, 54, 17, 62, 238, 104, 99, 145, 168, 75, 158, 159, 144},
		{222, 178, 16, 150, 92, 147, 53, 216, 206, 150, 44, 254, 176, 108, 103, 97, 193, 127, 48, 188, 254, 143, 191, 245, 255, 191, 224, 208, 64, 35, 74, 91},
		{104, 27, 207, 84, 217, 233, 149, 185, 21, 177, 254, 35, 143, 34, 194, 111, 254, 249, 170, 143, 57, 242, 28, 101, 81, 101, 141, 171, 64, 141, 30, 7},
		{99, 237, 38, 53, 115, 10, 188, 136, 64, 145, 141, 144, 199, 158, 153, 184, 236, 234, 248, 182, 62, 101, 82, 118, 239, 101, 214, 250, 120, 130, 176, 226},
		{177, 158, 233, 193, 211, 132, 43, 49, 45, 132, 228, 168, 112, 200, 136, 85, 125, 60, 58, 201, 182, 176, 108, 243, 15, 141, 28, 237, 108, 210, 76, 108},
		{27, 180, 210, 86, 39, 182, 223, 205, 51, 61, 194, 219, 88, 129, 35, 225, 9, 60, 202, 227, 162, 171, 251, 51, 23, 114, 148, 166, 235, 5, 163, 90},
		{247, 22, 135, 220, 58, 173, 247, 125, 72, 100, 52, 81, 23, 126, 131, 117, 41, 165, 4, 228, 139, 31, 115, 96, 11, 15, 14, 135, 179, 133, 171, 55},
		{124, 173, 40, 200, 185, 118, 198, 76, 158, 37, 65, 91, 163, 161, 205, 14, 230, 178, 120, 155, 111, 71, 171, 219, 233, 127, 54, 83, 61, 104, 156, 167},
		{58, 188, 138, 99, 131, 153, 36, 243, 232, 139, 63, 90, 143, 110, 176, 151, 210, 177, 231, 164, 41, 208, 252, 235, 251, 150, 207, 93, 48, 223, 34, 128},
		{231, 3, 116, 75, 60, 216, 38, 169, 203, 149, 180, 74, 129, 55, 86, 6, 172, 152, 174, 96, 86, 47, 22, 35, 184, 89, 88, 76, 32, 135, 99, 45},
		{223, 208, 55, 95, 64, 5, 20, 205, 134, 237, 199, 192, 136, 35, 227, 109, 19, 52, 76, 244, 222, 179, 250, 232, 164, 90, 102, 138, 147, 236, 19, 44},
		{67, 196, 47, 16, 74, 111, 118, 61, 156, 119, 116, 186, 219, 37, 2, 89, 0, 187, 154, 228, 200, 213, 35, 24, 171, 225, 170, 52, 4, 31, 215, 39},
		{40, 196, 17, 142, 62, 126, 211, 90, 215, 146, 68, 134, 45, 118, 216, 104, 51, 28, 57, 178, 32, 162, 115, 197, 191, 36, 236, 145, 114, 167, 104, 185},
		{8, 247, 250, 220, 241, 9, 232, 70, 197, 86, 230, 108, 249, 221, 229, 76, 106, 200, 141, 45, 143, 78, 5, 14, 183, 55, 105, 67, 253, 13, 69, 84},
		{127, 188, 135, 135, 122, 79, 110, 115, 128, 86, 77, 163, 146, 216, 240, 16, 100, 189, 105, 67, 96, 100, 90, 142, 59, 123, 92, 88, 195, 134, 228, 95},
		{45, 20, 44, 143, 120, 253, 172, 52, 182, 105, 73, 28, 198, 64, 14, 183, 18, 77, 75, 0, 227, 16, 247, 19, 62, 205, 142, 16, 21, 71, 175, 36},
		{225, 86, 6, 181, 109, 188, 209, 146, 178, 50, 58, 238, 38, 137, 93, 174, 37, 10, 171, 163, 181, 126, 103, 215, 9, 235, 117, 251, 112, 77, 89, 91},
		{159, 183, 23, 254, 152, 153, 238, 251, 232, 229, 223, 147, 223, 229, 234, 162, 8, 236, 243, 213, 151, 55, 43, 232, 181, 169, 229, 40, 141, 235, 162, 34},
		{6, 122, 16, 43, 239, 42, 185, 225, 55, 31, 119, 157, 41, 226, 175, 122, 106, 221, 125, 143, 194, 71, 192, 146, 134, 209, 75, 22, 63, 87, 255, 29},
		{222, 101, 114, 247, 17, 174, 227, 250, 95, 215, 199, 201, 230, 3, 33, 225, 194, 61, 153, 175, 215, 48, 245, 144, 85, 192, 227, 128, 118, 55, 252, 91},
		{124, 117, 115, 211, 138, 181, 67, 180, 129, 134, 103, 54, 120, 125, 98, 187, 222, 236, 132, 231, 183, 225, 66, 197, 106, 77, 150, 205, 26, 24, 25, 151},
		{13, 85, 139, 176, 140, 51, 46, 90, 147, 156, 43, 165, 106, 211, 213, 206, 11, 19, 103, 137, 180, 174, 152, 198, 226, 209, 65, 23, 115, 137, 118, 34},
		{229, 192, 19, 113, 140, 114, 42, 28, 37, 197, 209, 129, 42, 28, 101, 212, 66, 195, 252, 91, 127, 40, 84, 79, 241, 91, 106, 34, 188, 104, 199, 83},
		{74, 88, 220, 98, 47, 177, 198, 195, 245, 209, 103, 82, 113, 165, 222, 83, 2, 191, 243, 211, 116, 245, 230, 92, 81, 14, 0, 115, 57, 50, 61, 219},
		{130, 144, 179, 50, 71, 111, 84, 187, 233, 168, 223, 130, 56, 255, 118, 199, 44, 159, 202, 121, 61, 136, 254, 137, 19, 194, 79, 17, 214, 65, 162, 202},
		{3, 76, 236, 16, 123, 110, 71, 62, 186, 101, 92, 40, 202, 10, 196, 94, 147, 123, 177, 128, 156, 60, 220, 123, 32, 201, 35, 155, 157, 140, 118, 62},
		{48, 82, 203, 183, 132, 148, 8, 166, 22, 157, 62, 63, 215, 228, 67, 65, 77, 255, 116, 152, 47, 70, 143, 6, 247, 234, 182, 219, 38, 6, 161, 220},
		{134, 6, 159, 136, 192, 43, 152, 188, 173, 248, 174, 68, 251, 72, 152, 244, 2, 105, 56, 19, 251, 253, 3, 233, 152, 19, 97, 202, 225, 189, 49, 89},
		{152, 225, 214, 203, 164, 110, 50, 176, 124, 211, 219, 194, 53, 124, 110, 72, 117, 118, 250, 178, 190, 104, 166, 17, 243, 135, 199, 191, 7, 132, 160, 55},
		{165, 3, 22, 233, 88, 67, 109, 138, 209, 140, 127, 56, 172, 32, 199, 84, 133, 85, 84, 194, 25, 134, 197, 157, 245, 205, 191, 138, 36, 250, 161, 242},
		{3, 168, 59, 204, 158, 115, 59, 156, 175, 39, 75, 235, 52, 80, 2, 119, 214, 0, 213, 73, 24, 245, 4, 8, 36, 254, 242, 126, 117, 234, 171, 183},
		{238, 207, 15, 164, 248, 207, 163, 234, 53, 160, 72, 47, 147, 216, 212, 22, 210, 52, 198, 209, 69, 85, 134, 56, 249, 50, 248, 157, 76, 121, 112, 112},
		{21, 24, 18, 63, 28, 245, 193, 156, 214, 244, 54, 25, 105, 137, 37, 202, 90, 72, 202, 59, 224, 14, 149, 27, 176, 226, 55, 123, 186, 151, 130, 124},
		{167, 236, 252, 104, 129, 136, 88, 137, 137, 231, 66, 8, 25, 165, 135, 121, 54, 128, 37, 50, 160, 85, 153, 42, 81, 88, 255, 79, 19, 33, 106, 60},
		{192, 113, 231, 188, 32, 226, 135, 30, 71, 117, 137, 37, 161, 146, 162, 62, 85, 230, 49, 173, 235, 208, 3, 77, 239, 134, 181, 100, 253, 123, 70, 197},
		{22, 172, 162, 182, 15, 135, 45, 151, 203, 104, 108, 125, 115, 62, 1, 199, 188, 227, 174, 160, 188, 200, 80, 0, 120, 209, 254, 195, 172, 6, 4, 187},
		{10, 137, 187, 107, 121, 130, 178, 53, 201, 83, 150, 151, 139, 72, 153, 232, 129, 111, 129, 23, 131, 235, 6, 137, 144, 236, 6, 155, 237, 67, 37, 46},
		{154, 66, 74, 49, 248, 114, 46, 120, 191, 69, 152, 246, 18, 119, 167, 92, 141, 58, 4, 252, 190, 211, 252, 250, 169, 14, 176, 7, 120, 224, 61, 234},
		{238, 22, 135, 73, 244, 53, 26, 238, 104, 146, 106, 225, 237, 77, 165, 193, 113, 80, 76, 90, 200, 0, 205, 63, 214, 24, 214, 92, 133, 233, 72, 161},
		{79, 22, 230, 205, 190, 192, 115, 28, 143, 150, 189, 190, 217, 81, 133, 185, 16, 34, 35, 199, 41, 220, 124, 221, 199, 113, 20, 0, 125, 231, 108, 100},
		{30, 142, 229, 245, 144, 187, 31, 162, 50, 31, 207, 112, 34, 156, 93, 243, 60, 181, 230, 93, 151, 215, 2, 68, 130, 75, 162, 156, 249, 64, 192, 237},
		{202, 245, 7, 74, 146, 35, 241, 134, 15, 199, 235, 112, 108, 237, 82, 173, 131, 115, 137, 58, 143, 8, 163, 238, 2, 249, 61, 198, 165, 254, 255, 115},
		{190, 251, 115, 205, 232, 55, 108, 6, 240, 182, 9, 211, 63, 71, 130, 52, 198, 79, 138, 228, 8, 78, 246, 67, 101, 246, 112, 101, 125, 32, 98, 40},
		{4, 166, 198, 152, 161, 33, 200, 47, 109, 141, 146, 248, 31, 22, 41, 124, 81, 95, 216, 30, 222, 155, 28, 170, 236, 208, 13, 152, 149, 38, 73, 88},
		{149, 22, 31, 85, 83, 14, 250, 214, 119, 124, 242, 188, 31, 37, 188, 88, 41, 194, 205, 178, 222, 190, 92, 161, 142, 204, 48, 243, 117, 75, 92, 50},
		{128, 187, 20, 162, 132, 136, 160, 95, 33, 212, 244, 224, 113, 137, 178, 183, 170, 156, 154, 170, 18, 253, 76, 97, 172, 232, 64, 27, 67, 78, 251, 160},
		{59, 135, 19, 160, 230, 179, 222, 52, 127, 111, 16, 197, 90, 30, 233, 40, 186, 20, 179, 156, 128, 165, 115, 235, 19, 80, 44, 122, 178, 133, 205, 156},
		{15, 247, 38, 57, 91, 118, 20, 208, 18, 238, 230, 69, 225, 129, 252, 112, 244, 200, 135, 116, 113, 12, 241, 255, 78, 148, 157, 23, 12, 76, 110, 145},
		{103, 37, 72, 124, 197, 130, 244, 191, 212, 175, 144, 180, 223, 40, 92, 137, 26, 141, 55, 11, 185, 109, 242, 17, 42, 89, 209, 98, 33, 201, 229, 97},
		{61, 1, 13, 21, 129, 127, 0, 12, 105, 141, 29, 234, 56, 96, 79, 32, 57, 86, 221, 130, 93, 23, 176, 98, 94, 161, 29, 230, 148, 28, 163, 166},
		{95, 89, 217, 234, 171, 205, 238, 132, 92, 114, 227, 242, 133, 74, 147, 187, 17, 19, 66, 171, 142, 67, 158, 101, 128, 189, 211, 74, 236, 162, 239, 254},
		{231, 7, 201, 243, 87, 121, 5, 204, 244, 151, 42, 98, 167, 72, 141, 133, 19, 145, 42, 53, 234, 168, 191, 34, 162, 8, 222, 165, 190, 152, 124, 170},
		{131, 38, 9, 229, 185, 144, 25, 211, 129, 12, 83, 242, 136, 22, 102, 74, 227, 41, 6, 19, 17, 58, 137, 184, 37, 80, 40, 87, 194, 45, 189, 168},
		{116, 226, 72, 204, 207, 186, 195, 24, 76, 167, 109, 23, 248, 90, 240, 215, 124, 2, 47, 113, 196, 255, 117, 233, 126, 130, 37, 171, 212, 42, 126, 40},
		{53, 116, 179, 115, 206, 208, 215, 130, 63, 70, 36, 22, 173, 63, 97, 20, 205, 104, 249, 180, 136, 59, 221, 204, 50, 224, 74, 2, 41, 185, 113, 145},
		{164, 46, 232, 84, 163, 222, 0, 169, 200, 105, 117, 122, 157, 16, 31, 153, 140, 185, 245, 56, 97, 167, 134, 63, 95, 70, 43, 91, 12, 244, 58, 184},
		{156, 227, 30, 58, 194, 59, 55, 86, 236, 227, 51, 192, 2, 102, 238, 38, 23, 69, 167, 74, 230, 114, 170, 68, 186, 73, 26, 208, 50, 4, 13, 114},
		{227, 173, 232, 6, 247, 71, 22, 246, 209, 206, 42, 92, 181, 35, 211, 140, 34, 218, 145, 159, 177, 68, 44, 138, 77, 242, 240, 103, 39, 128, 192, 241},
		{9, 120, 252, 231, 17, 146, 225, 210, 192, 17, 131, 146, 249, 156, 70, 150, 94, 27, 229, 62, 49, 225, 214, 189, 205, 239, 129, 148, 224, 103, 110, 252},
		{131, 94, 26, 251, 255, 247, 195, 67, 224, 73, 145, 233, 59, 32, 246, 14, 162, 16, 78, 137, 148, 79, 143, 253, 36, 224, 112, 236, 225, 184, 174, 232},
		{51, 116, 235, 136, 16, 201, 249, 72, 184, 15, 184, 183, 223, 229, 66, 153, 184, 178, 81, 104, 89, 249, 35, 206, 35, 106, 53, 97, 100, 153, 202, 217},
		{86, 120, 208, 62, 251, 77, 177, 54, 149, 7, 7, 175, 100, 193, 151, 81, 79, 129, 42, 189, 212, 9, 20, 204, 25, 80, 177, 197, 116, 113, 84, 125},
		{143, 44, 172, 117, 250, 227, 232, 176, 36, 113, 127, 150, 74, 43, 208, 148, 37, 198, 193, 71, 7, 144, 68, 218, 190, 181, 239, 230, 75, 229, 126, 106},
		{220, 54, 170, 242, 255, 192, 64, 196, 90, 243, 22, 71, 136, 245, 145, 37, 194, 91, 117, 143, 59, 66, 157, 189, 250, 74, 52, 6, 29, 51, 38, 224},
		{114, 245, 223, 87, 89, 163, 173, 189, 54, 31, 217, 40, 187, 32, 104, 225, 125, 101, 236, 94, 50, 243, 199, 172, 119, 79, 247, 208, 52, 67, 124, 162},
		{192, 43, 126, 68, 33, 77, 42, 219, 49, 237, 185, 236, 14, 255, 94, 184, 222, 161, 170, 112, 93, 113, 175, 66, 119, 154, 92, 62, 231, 158, 12, 153},
		{207, 44, 241, 228, 48, 144, 72, 40, 149, 181, 118, 187, 252, 129, 248, 243, 48, 181, 155, 52, 222, 83, 28, 233, 209, 231, 166, 133, 122, 71, 251, 57},
		{174, 226, 112, 123, 175, 229, 115, 239, 255, 13, 251, 12, 1, 111, 245, 83, 24, 162, 241, 123, 69, 33, 150, 76, 155, 151, 158, 120, 218, 225, 33, 138},
		{38, 76, 54, 104, 201, 5, 106, 55, 74, 143, 74, 93, 242, 141, 113, 58, 144, 36, 193, 113, 131, 201, 199, 136, 226, 179, 130, 169, 148, 231, 236, 26},
		{12, 230, 72, 153, 113, 53, 34, 53, 41, 254, 183, 7, 237, 120, 31, 99, 239, 211, 216, 142, 144, 181, 121, 68, 228, 46, 181, 174, 76, 207, 19, 79},
		{97, 106, 98, 33, 94, 229, 78, 172, 99, 19, 176, 94, 34, 203, 26, 141, 240, 185, 104, 150, 19, 144, 226, 88, 81, 45, 180, 121, 230, 46, 218, 153},
		{239, 0, 151, 229, 69, 198, 87, 19, 29, 67, 141, 138, 12, 209, 28, 105, 152, 187, 116, 171, 34, 208, 27, 32, 202, 112, 143, 50, 56, 27, 45, 86},
		{160, 216, 75, 151, 182, 190, 45, 171, 210, 225, 158, 83, 57, 82, 241, 195, 173, 214, 135, 67, 55, 221, 232, 11, 5, 1, 36, 31, 113, 225, 211, 250},
		{206, 142, 14, 168, 70, 90, 37, 188, 126, 173, 28, 64, 189, 125, 65, 202, 69, 9, 167, 190, 107, 196, 238, 2, 172, 94, 247, 95, 81, 173, 228, 119},
		{187, 21, 187, 114, 101, 30, 155, 163, 200, 130, 27, 0, 64, 236, 12, 154, 226, 139, 108, 56, 7, 112, 7, 163, 144, 28, 58, 114, 199, 211, 180, 170},
		{50, 211, 236, 55, 29, 199, 52, 40, 36, 240, 104, 123, 151, 120, 97, 7, 207, 248, 156, 41, 50, 27, 61, 137, 227, 79, 104, 217, 249, 237, 52, 36},
		{194, 7, 124, 237, 79, 50, 221, 124, 150, 229, 142, 132, 214, 179, 56, 118, 102, 117, 156, 247, 55, 98, 224, 190, 211, 186, 145, 253, 120, 230, 112, 150},
		{184, 247, 181, 114, 117, 93, 78, 71, 183, 141, 84, 167, 123, 229, 11, 238, 36, 58, 176, 171, 152, 216, 21, 168, 176, 126, 215, 101, 128, 57, 50, 120},
		{188, 51, 159, 110, 73, 131, 159, 251, 61, 218, 16, 248, 125, 20, 131, 113, 92, 215, 231, 35, 179, 187, 92, 162, 56, 137, 29, 91, 227, 159, 36, 169},
		{253, 122, 239, 254, 124, 129, 175, 214, 75, 112, 232, 12, 125, 35, 179, 128, 113, 251, 183, 175, 192, 252, 88, 72, 242, 187, 133, 139, 93, 92, 44, 57},
		{228, 219, 66, 212, 146, 222, 69, 85, 117, 40, 181, 96, 253, 101, 169, 91, 23, 73, 188, 225, 172, 159, 219, 13, 8, 249, 81, 164, 78, 96, 6, 186},
		{167, 100, 248, 68, 62, 104, 46, 38, 229, 87, 202, 193, 94, 94, 5, 247, 75, 228, 199, 74, 116, 0, 41, 161, 0, 7, 178, 147, 125, 169, 188, 202},
		{189, 190, 120, 33, 189, 119, 59, 26, 139, 57, 171, 25, 169, 63, 24, 102, 58, 222, 194, 135, 158, 175, 218, 219, 168, 254, 136, 227, 157, 13, 75, 141},
		{142, 241, 116, 180, 129, 223, 181, 3, 208, 22, 150, 26, 242, 14, 83, 171, 100, 203, 30, 114, 68, 253, 30, 37, 218, 195, 217, 221, 127, 94, 74, 154},
		{39, 162, 165, 58, 156, 80, 212, 214, 243, 218, 7, 228, 231, 153, 77, 73, 219, 20, 242, 236, 87, 67, 32, 245, 65, 17, 21, 159, 18, 183, 5, 139},
		{196, 56, 139, 188, 134, 248, 48, 185, 131, 203, 18, 124, 4, 222, 241, 191, 235, 176, 111, 211, 199, 135, 201, 87, 46, 36, 203, 62, 5, 243, 126, 213},
		{5, 222, 47, 118, 38, 120, 90, 134, 22, 81, 30, 230, 75, 200, 74, 253, 219, 22, 44, 19, 160, 227, 142, 62, 57, 2, 81, 27, 95, 94, 75, 15},
		{239, 67, 228, 15, 75, 56, 236, 48, 236, 65, 6, 142, 52, 159, 34, 176, 190, 154, 69, 192, 33, 99, 158, 109, 64, 241, 29, 59, 189, 0, 251, 72},
		{52, 119, 7, 221, 208, 125, 243, 229, 159, 111, 167, 66, 166, 197, 223, 141, 238, 19, 150, 7, 33, 188, 218, 6, 41, 195, 164, 79, 142, 106, 65, 151},
		{246, 69, 110, 62, 207, 8, 243, 133, 92, 162, 18, 103, 8, 170, 68, 29, 202, 207, 195, 233, 193, 11, 120, 198, 62, 28, 61, 169, 3, 98, 106, 237},
		{154, 243, 143, 128, 217, 25, 123, 123, 76, 26, 64, 49, 86, 19, 234, 48, 53, 248, 182, 90, 45, 17, 82, 106, 90, 246, 130, 145, 17, 145, 73, 65},
		{226, 76, 83, 76, 127, 100, 129, 154, 17, 227, 208, 131, 140, 95, 21, 74, 13, 206, 249, 37, 14, 233, 164, 125, 105, 129, 121, 199, 43, 172, 215, 28},
		{116, 31, 202, 231, 29, 236, 77, 47, 154, 228, 98, 182, 67, 207, 35, 225, 212, 184, 242, 101, 68, 136, 30, 125, 174, 86, 123, 22, 220, 37, 106, 175},
		{136, 254, 135, 223, 220, 104, 158, 1, 177, 99, 238, 57, 182, 87, 219, 52, 185, 168, 40, 163, 114, 237, 156, 23, 63, 180, 47, 251, 51, 219, 230, 226},
		{60, 15, 177, 106, 219, 145, 183, 229, 59, 48, 126, 197, 42, 14, 141, 11, 153, 64, 199, 220, 42, 169, 66, 207, 19, 170, 123, 149, 180, 155, 131, 191},
		{58, 186, 123, 74, 29, 111, 165, 45, 109, 143, 205, 33, 234, 40, 50, 228, 222, 7, 27, 254, 235, 202, 236, 224, 201, 176, 133, 12, 89, 12, 215, 102},
		{20, 199, 114, 29, 146, 100, 11, 9, 43, 113, 135, 160, 77, 213, 182, 108, 25, 227, 32, 146, 65, 80, 219, 12, 65, 167, 18, 228, 2, 49, 44, 99},
		{243, 24, 179, 182, 51, 111, 43, 51, 132, 199, 224, 71, 220, 170, 38, 202, 37, 198, 252, 25, 12, 240, 201, 66, 17, 151, 90, 241, 39, 46, 88, 10},
		{90, 202, 30, 21, 159, 234, 138, 176, 150, 227, 121, 194, 104, 75, 142, 47, 1, 46, 188, 216, 232, 255, 219, 255, 254, 192, 8, 126, 198, 80, 193, 46},
		{57, 62, 74, 93, 243, 115, 43, 40, 114, 13, 60, 195, 52, 69, 238, 53, 29, 250, 225, 151, 88, 162, 184, 169, 253, 14, 103, 226, 191, 53, 45, 149},
		{241, 221, 34, 197, 23, 20, 252, 69, 103, 78, 17, 14, 5, 118, 146, 13, 195, 219, 209, 38, 181, 139, 183, 37, 175, 152, 188, 203, 80, 96, 115, 22},
		{137, 99, 72, 43, 251, 166, 48, 158, 251, 86, 6, 58, 12, 85, 250, 78, 188, 200, 220, 43, 216, 79, 172, 7, 193, 134, 169, 57, 148, 175, 83, 234},
		{143, 127, 112, 170, 192, 7, 76, 94, 28, 118, 24, 64, 163, 82, 18, 227, 70, 109, 230, 193, 64, 74, 162, 162, 245, 194, 216, 46, 157, 21, 99, 96},
		{229, 156, 196, 58, 197, 231, 105, 203, 57, 67, 199, 197, 110, 215, 158, 72, 67, 128, 0, 188, 133, 15, 134, 137, 144, 195, 189, 118, 133, 180, 164, 184},
		{95, 255, 127, 15, 144, 219, 137, 185, 192, 114, 137, 163, 246, 112, 119, 43, 193, 3, 87, 38, 156, 248, 92, 90, 230, 214, 116, 61, 21, 113, 52, 121},
		{14, 99, 128, 191, 47, 101, 56, 155, 135, 181, 210, 203, 103, 126, 57, 243, 136, 50, 136, 223, 115, 178, 47, 159, 246, 146, 59, 57, 127, 8, 3, 234},
		{25, 94, 154, 65, 115, 33, 164, 249, 62, 255, 163, 4, 231, 230, 76, 15, 90, 93, 75, 78, 106, 3, 228, 46, 243, 88, 3, 112, 216, 109, 69, 64},
		{235, 56, 100, 35, 185, 114, 120, 127, 227, 180, 201, 54, 71, 211, 220, 116, 229, 238, 229, 247, 99, 72, 27, 144, 106, 39, 24, 116, 128, 253, 93, 199},
		{225, 120, 99, 255, 16, 39, 157, 216, 176, 0, 138, 25, 43, 165, 28, 113, 60, 108, 201, 136, 223, 31, 29, 143, 143, 176, 167, 108, 193, 156, 11, 183},
		{198, 255, 124, 87, 54, 12, 15, 189, 93, 29, 108, 14, 20, 81, 66, 225, 107, 186, 25, 155, 60, 59, 164, 99, 62, 29, 27, 105, 52, 100, 183, 183},
		{209, 223, 230, 99, 127, 47, 112, 243, 185, 72, 158, 157, 155, 148, 188, 43, 93, 198, 158, 255, 201, 35, 29, 156, 221, 102, 60, 194, 223, 159, 67, 204},
		{33, 210, 118, 99, 205, 71, 24, 253, 98, 38, 156, 86, 16, 48, 199, 210, 242, 211, 167, 239, 190, 58, 196, 117, 222, 229, 201, 150, 126, 250, 85, 223},
		{66, 214, 53, 45, 251, 105, 163, 158, 177, 11, 57, 23, 178, 225, 191, 192, 60, 45, 135, 192, 10, 204, 211, 174, 224, 119, 132, 163, 15, 125, 247, 159},
		{49, 30, 47, 60, 176, 6, 148, 179, 83, 36, 119, 84, 150, 129, 37, 86, 246, 155, 74, 11, 225, 59, 233, 59, 46, 195, 5, 184, 248, 170, 19, 154},
		{252, 125, 206, 145, 157, 0, 27, 245, 134, 125, 43, 148, 123, 47, 204, 116, 217, 185, 10, 114, 206, 123, 85, 134, 149, 138, 226, 121, 164, 105, 227, 121},
		{187, 81, 71, 107, 84, 19, 179, 169, 161, 123, 216, 23, 187, 254, 188, 68, 63, 185, 39, 118, 57, 176, 66, 220, 200, 146, 226, 236, 72, 141, 65, 170},
		{135, 61, 20, 109, 28, 133, 242, 184, 46, 242, 134, 39, 159, 94, 223, 20, 226, 141, 236, 117, 123, 98, 215, 1, 253, 108, 233, 27, 179, 158, 38, 97},
		{255, 87, 190, 63, 175, 138, 30, 193, 26, 242, 97, 54, 9, 221, 84, 160, 180, 175, 71, 133, 235, 250, 136, 236, 35, 242, 147, 18, 10, 238, 90, 182},
		{27, 218, 28, 162, 229, 113, 11, 136, 1, 16, 10, 186, 25, 176, 211, 183, 175, 15, 229, 162, 2, 176, 39, 168, 152, 199, 15, 232, 12, 208, 236, 218},
		{252, 163, 179, 1, 166, 208, 110, 111, 178, 78, 218, 100, 220, 126, 142, 77, 96, 178, 8, 119, 26, 154, 197, 253, 17, 133, 47, 254, 195, 178, 154, 126},
		{69, 49, 74, 41, 87, 91, 114, 46, 223, 0, 125, 221, 233, 166, 91, 4, 191, 99, 224, 145, 13, 72, 128, 239, 7, 242, 70, 146, 70, 143, 143, 38},
		{211, 212, 205, 6, 41, 81, 243, 175, 248, 178, 234, 232, 124, 95, 12, 133, 74, 191, 30, 143, 238, 196, 171, 131, 54, 243, 124, 191, 244, 130, 247, 30},
		{44, 92, 70, 189, 231, 225, 222, 220, 245, 237, 8, 203, 26, 142, 62, 200, 35, 79, 79, 109, 204, 78, 109, 21, 129, 114, 14, 31, 14, 255, 105, 71},
		{28, 6, 18, 134, 250, 212, 16, 184, 255, 123, 86, 9, 133, 71, 221, 82, 225, 154, 148, 145, 205, 122, 69, 83, 120, 198, 205, 239, 74, 197, 45, 84},
		{66, 180, 81, 162, 195, 154, 57, 25, 170, 25, 129, 5, 229, 200, 194, 16, 23, 128, 182, 221, 243, 253, 176, 242, 102, 73, 212, 217, 24, 193, 239, 115},
		{174, 171, 194, 116, 124, 123, 236, 221, 3, 64, 72, 91, 12, 244, 228, 244, 117, 188, 134, 113, 138, 224, 162, 65, 31, 107, 230, 15, 239, 56, 128, 35},
		{217, 182, 178, 21, 21, 167, 5, 117, 115, 251, 225, 168, 124, 22, 11, 135, 168, 28, 170, 151, 246, 109, 96, 254, 178, 131, 202, 248, 186, 37, 53, 34},
		{98, 67, 42, 36, 197, 62, 156, 127, 186, 189, 41, 208, 221, 57, 49, 153, 57, 72, 91, 191, 164, 17, 196, 48, 62, 66, 76, 207, 246, 193, 214, 187},
		{171, 214, 50, 50, 170, 74, 74, 35, 146, 220, 24, 55, 126, 236, 40, 188, 29, 191, 89, 120, 174, 125, 122, 188, 226, 241, 116, 172, 158, 121, 57, 38},
		{124, 172, 103, 3, 202, 85, 111, 24, 75, 71, 195, 116, 120, 159, 13, 10, 58, 212, 228, 173, 131, 73, 146, 28, 173, 128, 145, 55, 41, 10, 133, 125},
		{17, 17, 97, 183, 45, 170, 172, 157, 31, 217, 170, 223, 250, 8, 169, 2, 6, 49, 255, 251, 39, 169, 184, 187, 247, 97, 165, 94, 58, 108, 220, 43},
		{181, 202, 204, 231, 12, 110, 19, 223, 22, 66, 25, 169, 125, 238, 96, 7, 27, 103, 91, 38, 171, 95, 223, 190, 69, 51, 53, 162, 36, 127, 255, 120},
		{230, 237, 154, 26, 155, 137, 36, 141, 61, 62, 223, 252, 4, 126, 7, 245, 36, 182, 82, 102, 196, 74, 167, 141, 241, 180, 62, 147, 216, 204, 4, 97},
		{105, 130, 112, 150, 92, 160, 142, 192, 106, 4, 136, 242, 85, 208, 231, 48, 227, 224, 47, 106, 114, 237, 216, 96, 58, 141, 67, 222, 181, 248, 254, 1},
		{29, 199, 29, 86, 105, 72, 93, 226, 153, 58, 162, 109, 5, 200, 136, 149, 113, 3, 2, 161, 126, 254, 2, 151, 185, 208, 232, 76, 138, 142, 31, 62},
		{40, 34, 49, 94, 105, 65, 193, 99, 8, 187, 156, 171, 43, 90, 254, 19, 64, 226, 145, 90, 31, 83, 215, 120, 246, 81, 25, 240, 40, 198, 8, 64},
		{229, 159, 126, 86, 157, 176, 85, 67, 235, 105, 82, 183, 163, 112, 193, 194, 170, 206, 117, 79, 12, 78, 103, 125, 105, 140, 12, 253, 88, 200, 118, 190},
		{193, 210, 64, 90, 106, 171, 154, 8, 36, 114, 62, 39, 202, 197, 244, 185, 90, 245, 219, 212, 242, 13, 73, 0, 240, 186, 82, 214, 103, 105, 172, 236},
		{55, 183, 4, 125, 10, 225, 184, 248, 44, 198, 11, 169, 226, 192, 186, 221, 64, 36, 75, 190, 12, 157, 142, 55, 170, 154, 229, 186, 164, 47, 63, 51},
		{243, 107, 68, 124, 188, 213, 146, 49, 3, 35, 111, 128, 16, 233, 40, 252, 149, 53, 87, 79, 5, 213, 144, 26, 29, 234, 121, 215, 63, 200, 131, 248},
		{117, 208, 1, 255, 189, 9, 126, 35, 246, 5, 202, 35, 253, 242, 143, 23, 252, 27, 238, 234, 186, 12, 151, 93, 195, 193, 9, 64, 161, 7, 218, 171},
		{50, 206, 150, 32, 29, 217, 143, 237, 235, 29, 120, 76, 66, 120, 143, 162, 101, 49, 159, 204, 188, 146, 235, 0, 133, 124, 16, 41, 173, 198, 154, 74},
		{187, 136, 138, 243, 33, 3, 51, 46, 126, 131, 221, 105, 58, 237, 175, 113, 79, 54, 121, 185, 6, 44, 178, 102, 171, 44, 152, 78, 149, 255, 96, 97},
		{37, 120, 187, 240, 95, 101, 158, 83, 197, 237, 117, 225, 73, 42, 50, 20, 185, 180, 191, 84, 93, 23, 11, 85, 214, 152, 105, 152, 9, 131, 16, 48},
		{189, 254, 179, 194, 22, 182, 219, 222, 21, 40, 6, 225, 255, 37, 99, 110, 193, 75, 121, 137, 131, 8, 230, 226, 31, 72, 177, 251, 174, 181, 213, 189},
		{106, 103, 21, 163, 209, 36, 31, 167, 34, 177, 5, 211, 34, 104, 53, 38, 146, 246, 207, 55, 183, 175, 171, 71, 1, 200, 246, 238, 246, 94, 103, 41},
		{28, 133, 164, 74, 101, 30, 140, 219, 116, 233, 162, 234, 117, 212, 223, 55, 236, 50, 245, 193, 228, 197, 208, 128, 194, 201, 233, 211, 73, 28, 107, 81},
		{190, 79, 192, 58, 252, 184, 185, 140, 160, 27, 37, 83, 26, 47, 185, 217, 79, 61, 191, 156, 237, 134, 13, 97, 108, 107, 0, 137, 238, 69, 182, 108},
		{24, 231, 230, 146, 171, 239, 63, 133, 233, 105, 125, 133, 145, 88, 142, 137, 183, 210, 196, 230, 108, 2, 46, 178, 142, 70, 19, 18, 8, 53, 45, 8},
		{206, 244, 246, 1, 178, 162, 128, 127, 143, 83, 235, 162, 158, 39, 155, 56, 165, 178, 248, 232, 18, 136, 171, 84, 149, 220, 124, 14, 240, 3, 74, 33},
		{241, 103, 34, 170, 194, 255, 31, 236, 247, 34, 99, 224, 12, 106, 142, 21, 196, 246, 188, 176, 189, 25, 88, 70, 151, 37, 132, 223, 185, 206, 57, 29},
		{194, 129, 254, 82, 122, 142, 137, 214, 118, 190, 144, 6, 159, 88, 57, 121, 89, 78, 172, 128, 169, 124, 182, 63, 12, 145, 111, 2, 85, 246, 30, 0},
		{74, 183, 49, 18, 90, 242, 57, 72, 28, 211, 111, 184, 255, 72, 33, 5, 168, 126, 236, 116, 117, 181, 135, 212, 16, 35, 29, 225, 33, 61, 18, 101},
		{225, 38, 100, 238, 158, 196, 29, 210, 95, 232, 86, 212, 43, 108, 27, 90, 165, 141, 69, 35, 239, 30, 118, 178, 132, 168, 121, 173, 148, 33, 113, 185},
		{47, 84, 193, 107, 45, 168, 129, 57, 109, 115, 46, 110, 249, 102, 135, 129, 182, 173, 6, 239, 118, 74, 193, 53, 52, 19, 66, 47, 104, 167, 110, 210},
		{107, 83, 2, 56, 20, 76, 141, 38, 248, 237, 19, 139, 234, 30, 22, 251, 211, 222, 109, 103, 24, 164, 92, 23, 27, 220, 180, 199, 98, 215, 2, 87},
		{211, 236, 29, 238, 224, 189, 153, 207, 221, 221, 138, 22, 106, 195, 173, 222, 47, 123, 45, 70, 5, 33, 155, 76, 100, 125, 63, 92, 144, 142, 92, 54},
		{196, 236, 21, 39, 18, 56, 221, 172, 132, 1, 23, 94, 81, 130, 230, 94, 180, 59, 228, 57, 92, 128, 80, 221, 233, 61, 164, 3, 156, 159, 130, 107},
		{181, 125, 201, 228, 111, 50, 155, 110, 219, 170, 210, 41, 77, 176, 81, 59, 21, 48, 44, 80, 107, 211, 205, 181, 208, 9, 10, 107, 147, 135, 166, 252},
		{42, 197, 199, 221, 170, 156, 154, 194, 65, 112, 131, 245, 157, 36, 166, 237, 129, 251, 93, 203, 230, 107, 207, 247, 11, 34, 174, 187, 5, 23, 65, 114},
		{209, 13, 107, 127, 191, 251, 119, 120, 67, 134, 233, 88, 16, 184, 108, 240, 37, 56, 33, 105, 63, 182, 187, 2, 52, 106, 234, 157, 250, 197, 151, 180},
		{189, 109, 47, 206, 84, 180, 140, 185, 195, 243, 232, 201, 186, 230, 108, 11, 125, 71, 134, 8, 83, 43, 38, 16, 143, 186, 140, 107, 203, 27, 84, 131},
		{74, 214, 13, 77, 245, 160, 31, 75, 221, 246, 17, 245, 48, 252, 122, 253, 129, 208, 188, 182, 250, 114, 156, 237, 7, 159, 184, 234, 14, 232, 185, 157},
		{151, 68, 142, 180, 165, 85, 83, 172, 205, 44, 247, 130, 255, 94, 63, 34, 125, 21, 113, 193, 44, 219, 144, 240, 133, 46, 80, 201, 124, 247, 227, 135},
		{124, 78, 3, 53, 130, 131, 154, 191, 229, 225, 204, 65, 13, 95, 93, 3, 50, 195, 28, 157, 83, 197, 99, 51, 157, 229, 154, 59, 31, 35, 41, 23},
		{0, 23, 205, 8, 67, 141, 11, 89, 8, 254, 156, 204, 76, 226, 162, 111, 205, 32, 163, 75, 236, 21, 13, 239, 199, 20, 82, 101, 87, 142, 114, 196},
		{228, 201, 49, 177, 128, 164, 81, 95, 40, 100, 214, 140, 66, 107, 37, 7, 139, 164, 137, 183, 149, 80, 136, 60, 239, 171, 120, 152, 7, 63, 166, 15},
		{14, 92, 137, 224, 197, 207, 195, 13, 147, 56, 30, 239, 18, 77, 218, 103, 124, 161, 191, 164, 47, 189, 90, 100, 234, 244, 175, 109, 24, 96, 212, 20},
		{168, 87, 136, 144, 156, 135, 151, 18, 174, 191, 175, 101, 182, 17, 241, 151, 0, 253, 187, 46, 7, 208, 88, 226, 101, 79, 112, 90, 145, 180, 19, 158},
		{216, 36, 217, 123, 39, 11, 240, 45, 215, 28, 127, 228, 60, 224, 139, 101, 145, 173, 55, 152, 109, 74, 148, 31, 89, 150, 95, 216, 47, 64, 10, 35},
		{62, 10, 30, 129, 246, 148, 115, 161, 39, 12, 89, 68, 123, 240, 29, 136, 240, 50, 233, 140, 95, 175, 50, 136, 190, 217, 72, 40, 128, 149, 104, 243},
		{220, 246, 16, 10, 52, 110, 151, 31, 182, 68, 69, 214, 144, 133, 231, 202, 128, 157, 84, 237, 80, 129, 120, 74, 134, 73, 217, 102, 242, 3, 193, 118},
		{201, 179, 222, 133, 238, 113, 234, 170, 25, 102, 228, 73, 136, 49, 51, 111, 110, 123, 110, 239, 232, 108, 50, 116, 252, 99, 132, 4, 5, 54, 131, 29},
		{152, 81, 243, 206, 206, 127, 197, 65, 167, 172, 163, 0, 83, 253, 61, 109, 116, 172, 150, 136, 240, 88, 247, 109, 37, 107, 87, 209, 79, 31, 64, 74},
		{107, 92, 45, 100, 7, 236, 22, 102, 217, 67, 176, 99, 102, 122, 127, 223, 99, 235, 115, 229, 167, 39, 150, 122, 214, 92, 200, 109, 225, 1, 220, 75},
		{246, 242, 166, 209, 245, 238, 5, 95, 5, 87, 153, 252, 121, 69, 232, 149, 228, 23, 209, 255, 238, 57, 37, 131, 77, 238, 220, 110, 133, 122, 109, 111},
		{223, 246, 146, 78, 5, 23, 109, 86, 255, 10, 201, 168, 190, 229, 110, 75, 236, 117, 127, 221, 178, 223, 221, 192, 81, 218, 23, 105, 90, 202, 196, 51},
		{212, 129, 136, 173, 37, 200, 125, 67, 47, 43, 52, 196, 124, 197, 39, 196, 133, 93, 138, 76, 76, 150, 99, 70, 0, 141, 219, 49, 212, 219, 63, 93},
		{115, 32, 121, 127, 245, 66, 71, 117, 84, 81, 84, 183, 63, 17, 109, 11, 114, 166, 119, 58, 13, 218, 81, 221, 243, 145, 90, 147, 239, 192, 118, 127},
		{194, 206, 80, 254, 211, 212, 157, 173, 6, 90, 26, 0, 240, 218, 68, 237, 205, 223, 183, 131, 65, 73, 15, 216, 5, 119, 128, 166, 173, 121, 237, 83},
		{133, 27, 103, 196, 15, 195, 136, 143, 117, 243, 204, 156, 72, 121, 188, 179, 95, 197, 6, 231, 104, 144, 87, 101, 105, 68, 5, 230, 190, 192, 124, 217},
		{62, 201, 218, 79, 12, 116, 171, 109, 223, 56, 33, 152, 68, 89, 1, 175, 59, 150, 150, 213, 222, 128, 229, 65, 209, 42, 142, 137, 32, 70, 240, 174},
		{188, 36, 158, 204, 47, 225, 22, 125, 92, 211, 97, 255, 154, 149, 7, 169, 148, 90, 10, 38, 182, 100, 58, 81, 75, 105, 133, 15, 23, 115, 228, 87},
		{135, 100, 107, 228, 221, 218, 83, 59, 240, 236, 133, 152, 220, 255, 234, 72, 241, 116, 202, 229, 198, 227, 120, 174, 128, 119, 99, 93, 143, 22, 88, 224},
		{252, 81, 86, 200, 138, 27, 241, 233, 45, 9, 43, 68, 25, 103, 244, 92, 142, 17, 199, 202, 4, 226, 47, 67, 214, 97, 30, 8, 252, 244, 62, 169},
		{199, 136, 104, 49, 169, 69, 41, 158, 100, 142, 54, 112, 245, 95, 41, 42, 172, 69, 190, 66, 138, 62, 11, 183, 59, 174, 49, 161, 82, 28, 214, 161},
		{99, 212, 232, 200, 0, 155, 246, 121, 120, 212, 4, 73, 157, 193, 4, 214, 60, 181, 58, 37, 89, 124, 53, 88, 15, 57, 215, 186, 47, 67, 16, 255},
		{9, 122, 155, 229, 113, 38, 98, 130, 220, 136, 206, 218, 148, 158, 143, 194, 89, 25, 14, 247, 163, 59, 44, 212, 178, 217, 65, 163, 118, 122, 181, 147},
		{51, 255, 165, 27, 139, 138, 162, 139, 163, 204, 97, 241, 9, 238, 167, 226, 62, 209, 171, 142, 227, 128, 83, 235, 41, 125, 220, 105, 80, 194, 136, 21},
		{206, 14, 111, 191, 197, 241, 157, 146, 244, 50, 205, 212, 232, 125, 19, 167, 92, 217, 199, 37, 186, 14, 225, 19, 4, 121, 125, 184, 103, 27, 193, 139},
		{215, 137, 204, 156, 154, 135, 156, 128, 69, 145, 254, 69, 125, 138, 66, 23, 102, 176, 159, 104, 245, 190, 77, 169, 48, 86, 183, 159, 168, 29, 154, 245},
		{230, 105, 3, 19, 94, 152, 205, 234, 151, 160, 49, 129, 246, 19, 148, 115, 143, 123, 226, 98, 76, 155, 185, 255, 127, 15, 52, 73, 16, 227, 210, 8},
		{207, 244, 21, 208, 143, 47, 153, 40, 181, 128, 147, 206, 200, 194, 70, 129, 16, 156, 156, 149, 105, 48, 169, 72, 171, 174, 83, 27, 65, 219, 165, 233},
		{108, 176, 47, 61, 190, 164, 62, 87, 17, 34, 152, 209, 152, 93, 68, 238, 74, 8, 207, 137, 77, 184, 2, 77, 201, 91, 34, 152, 15, 51, 196, 32},
		{96, 65, 245, 33, 92, 229, 90, 108, 119, 193, 86, 241, 208, 240, 90, 117, 108, 27, 110, 5, 145, 215, 131, 204, 110, 95, 237, 122, 22, 147, 222, 94},
		{139, 218, 152, 67, 176, 6, 38, 39, 49, 53, 15, 179, 124, 197, 224, 92, 49, 0, 230, 123, 164, 150, 32, 54, 181, 128, 123, 32, 42, 97, 3, 16},
		{81, 76, 95, 50, 85, 58, 221, 146, 213, 82, 51, 13, 134, 107, 52, 18, 255, 234, 182, 173, 15, 197, 72, 9, 204, 109, 123, 139, 151, 164, 81, 248},
		{152, 112, 82, 0, 95, 234, 147, 89, 167, 140, 238, 173, 61, 56, 118, 37, 202, 227, 132, 80, 54, 147, 3, 236, 108, 8, 35, 185, 83, 204, 216, 61},
		{168, 105, 188, 153, 249, 243, 241, 163, 224, 37, 26, 230, 84, 106, 148, 192, 195, 19, 92, 158, 35, 60, 98, 137, 217, 72, 118, 217, 162, 244, 72, 62},
		{1, 249, 239, 195, 59, 203, 146, 7, 37, 222, 231, 227, 99, 46, 142, 94, 78, 62, 65, 186, 80, 24, 215, 243, 15, 205, 64, 56, 249, 144, 37, 6},
		{76, 251, 21, 15, 57, 147, 51, 85, 198, 112, 61, 165, 55, 48, 22, 110, 93, 162, 54, 253, 115, 213, 122, 153, 241, 157, 52, 115, 166, 81, 28, 76},
		{41, 126, 57, 113, 162, 202, 21, 193, 20, 124, 1, 237, 246, 47, 226, 39, 246, 74, 136, 255, 188, 135, 108, 50, 126, 43, 100, 114, 219, 186, 110, 65}
	}};
	gen_rand_matrix_fulltimepad<nkeys>(matrix_rand);
	gen_uniform_matrix_fulltimepad<nkeys>(matrix);

	uint32_t *cr_out1, *cr_out2; // check_repetitions out

	// based on the data matrix, check if previous value at matrix[i-1][j] has a similiar bit. Do a cross check. And check the values beside the value
	std::cout << std::endl << "matrix: ";
	analyze_cross_check<nkeys>(matrix);
	std::cout << std::endl << "check chances of data being a certain byte (0-256): ";
	check_common<nkeys>(matrix);
	std::cout << std::endl << "check chances of bytes repeating: "; // rate of repitition, how many times same values exist in matrix
	cr_out1 = check_repetitions<nkeys>(matrix);
	std::cout << std::endl;

	// for random data:
	std::cout << std::endl << "random matrix: ";
	analyze_cross_check<nkeys>(matrix_rand);
	std::cout << std::endl << "check chances of data being a certain byte (0-256): ";
	check_common<nkeys>(matrix_rand);
	std::cout << std::endl << "check chances of bytes repeating: ";
	cr_out2 = check_repetitions<nkeys>(matrix_rand);
	std::cout << std::endl;

	// analyze check_repetitions
	analyze_repetition(cr_out1, cr_out2);

	return 0;
}
